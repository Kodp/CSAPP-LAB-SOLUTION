# GADDQ 目前被移除，因为换成了SHLQ，此代码不能正常工作。
# 通过反注释 misc/isa.c misc/isa.h 并在yas-grammar.lex里添加"|gaddq"，注释 shlq 的部分可以使gaddq正常工作。
# 注意重新编译！ misc 和 pipe 文件夹都重新编译一下，一定要用 make VERSION=full 来编译。

# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# rbx, rcx, rbp, r8, r9, r10, r11, r12, r13, r14
Check:
	iaddq -10, %rdx
	jl Post
Loop: 
Load:mrmovq (%rdi), %rbx
	mrmovq 8(%rdi), %rcx
	mrmovq 16(%rdi), %rbp
	mrmovq 24(%rdi), %r8
	mrmovq 32(%rdi), %r9
	mrmovq 40(%rdi), %r10
	mrmovq 48(%rdi), %r11
	mrmovq 56(%rdi), %r12
	mrmovq 64(%rdi), %r13
	mrmovq 72(%rdi), %r14
C1: andq %rbx, %rbx
	gaddq 1, %rax
C2: andq %rcx, %rcx
	gaddq 1, %rax
C3: andq %rbp, %rbp
	gaddq 1, %rax
C4: andq %r8, %r8
	gaddq 1, %rax
C5: andq %r9, %r9
	gaddq 1, %rax
C6: andq %r10, %r10
	gaddq 1, %rax
C7: andq %r11, %r11
	gaddq 1, %rax
C8: andq %r12, %r12
	gaddq 1, %rax
C9: andq %r13, %r13
	gaddq 1, %rax
C10: andq %r14, %r14
	gaddq 1, %rax
Store: rmmovq %rbx, (%rsi)
	rmmovq %rcx, 8(%rsi)
	rmmovq %rbp, 16(%rsi)
	rmmovq %r8, 24(%rsi)
	rmmovq %r9, 32(%rsi)
	rmmovq %r10, 40(%rsi)
	rmmovq %r11, 48(%rsi)
	rmmovq %r12, 56(%rsi)
	rmmovq %r13, 64(%rsi)
	rmmovq %r14, 72(%rsi)
Update: iaddq 80, %rdi
	iaddq 80, %rsi
	iaddq -10, %rdx  # 利用iaddq置CC的特性
	jge Loop

Post: iaddq 4, %rdx # (n-10)+4=n-6
	jl B3
	jg B8
	jmp MOV6
B3: iaddq 3, %rdx# (n-6)+3=n-3
	jl B1
	jg B4
	jmp MOV3
B1: iaddq 2, %rdx # (n-3)+2=n-1
	je MOV1
	jg MOV2
	ret  # MOV0
B4: iaddq -1, %rdx# (n-3)-1=n-4
	je MOV4
	jmp MOV5
B8: iaddq -2, %rdx# (n-6)-2=n-8
	jl MOV7
	je MOV8
	# MOV9

# 倒着移动，MOV9移动第9个元素，随即MOV8移动第8个元素
MOV9: mrmovq 64(%rdi), %r8
	rmmovq %r8, 64(%rsi) # 实现了load forward，无暂停
	andq %r8, %r8
	gaddq 1, %rax
MOV8: mrmovq 56(%rdi), %r8
	rmmovq %r8, 56(%rsi)
	andq %r8, %r8
	gaddq 1, %rax
MOV7: mrmovq 48(%rdi), %r8
	rmmovq %r8, 48(%rsi)
	andq %r8, %r8
	gaddq 1, %rax
MOV6: mrmovq 40(%rdi), %r8
	rmmovq %r8, 40(%rsi)
	andq %r8, %r8
	gaddq 1, %rax
MOV5: mrmovq 32(%rdi), %r8
	rmmovq %r8, 32(%rsi)
	andq %r8, %r8
	gaddq 1, %rax
MOV4: mrmovq 24(%rdi), %r8
	rmmovq %r8, 24(%rsi)
	andq %r8, %r8
	gaddq 1, %rax
MOV3: mrmovq 16(%rdi), %r8
	rmmovq %r8, 16(%rsi)
	andq %r8, %r8
	gaddq 1, %rax
MOV2: mrmovq 8(%rdi), %r8
	rmmovq %r8, 8(%rsi)
	andq %r8, %r8
	gaddq 1, %rax
MOV1: mrmovq (%rdi), %r8
	rmmovq %r8, (%rsi)
	andq %r8, %r8
	gaddq 1, %rax
MOV0:
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
