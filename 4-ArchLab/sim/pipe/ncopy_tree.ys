#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# rbx, rcx, rbp, r8, r9, r10, r11, r12, r13, r14
# 理论最优跳转树版本
Check:
	iaddq -10, %rdx
	jl Post
Loop: 
Load:mrmovq (%rdi), %rbx
	mrmovq 8(%rdi), %rcx
	mrmovq 16(%rdi), %rbp
	mrmovq 24(%rdi), %r8
	mrmovq 32(%rdi), %r9
	mrmovq 40(%rdi), %r10
	mrmovq 48(%rdi), %r11
	mrmovq 56(%rdi), %r12
	mrmovq 64(%rdi), %r13
	mrmovq 72(%rdi), %r14
C1: andq %rbx, %rbx
	jle C2
	iaddq 1, %rax
C2: andq %rcx, %rcx
	jle C3
	iaddq 1, %rax
C3: andq %rbp, %rbp
	jle C4
	iaddq 1, %rax
C4: andq %r8, %r8
	jle C5
	iaddq 1, %rax
C5: andq %r9, %r9
	jle C6
	iaddq 1, %rax
C6: andq %r10, %r10
	jle C7
	iaddq 1, %rax
C7: andq %r11, %r11
	jle C8
	iaddq 1, %rax
C8: andq %r12, %r12
	jle C9
	iaddq 1, %rax
C9: andq %r13, %r13
	jle C10
	iaddq 1, %rax
C10: andq %r14, %r14
	jle Store
	iaddq 1, %rax
Store: rmmovq %rbx, (%rsi)
	rmmovq %rcx, 8(%rsi)
	rmmovq %rbp, 16(%rsi)
	rmmovq %r8, 24(%rsi)
	rmmovq %r9, 32(%rsi)
	rmmovq %r10, 40(%rsi)
	rmmovq %r11, 48(%rsi)
	rmmovq %r12, 56(%rsi)
	rmmovq %r13, 64(%rsi)
	rmmovq %r14, 72(%rsi)
Update: iaddq 80, %rdi
	iaddq 80, %rsi
	iaddq -10, %rdx  # 利用iaddq置CC的特性
	jge Loop


Post:iaddq 7, %rdx   # n-3=(n-10)+7
    jg B49
	jl B02
	je MOV3
B02:iaddq 2, %rdx # n-1=(n-3)+2
    je MOV1
	jg MOV2
	ret # MOV0
B49:iaddq -4, %rdx # n-7=(n-3)-4
	jl B46
	jg B89
	je MOV7
B46:iaddq 2, %rdx # n-5=(n-7)+2
	jl MOV4
	je MOV5
	jg MOV6
B89:iaddq -1, %rdx # n-8=(n-7)-1
	je MOV8
	# jg MOV9 # 顺延

# 倒着移动，MOV9移动第9个元素，随即MOV8移动第8个元素
MOV9: mrmovq 64(%rdi), %r8
	rmmovq %r8, 64(%rsi) # 实现了load forward，无暂停
	andq %r8, %r8
	jle MOV8
	iaddq 1, %rax
MOV8: mrmovq 56(%rdi), %r8
	rmmovq %r8, 56(%rsi)
	andq %r8, %r8
	jle MOV7
	iaddq 1, %rax
MOV7: mrmovq 48(%rdi), %r8
	rmmovq %r8, 48(%rsi)
	andq %r8, %r8
	jle MOV6
	iaddq 1, %rax
MOV6: mrmovq 40(%rdi), %r8
	rmmovq %r8, 40(%rsi)
	andq %r8, %r8
	jle MOV5
	iaddq 1, %rax
MOV5: mrmovq 32(%rdi), %r8
	rmmovq %r8, 32(%rsi)
	andq %r8, %r8
	jle MOV4
	iaddq 1, %rax
MOV4: mrmovq 24(%rdi), %r8
	rmmovq %r8, 24(%rsi)
	andq %r8, %r8
	jle MOV3
	iaddq 1, %rax
MOV3: mrmovq 16(%rdi), %r8
	rmmovq %r8, 16(%rsi)
	andq %r8, %r8
	jle MOV2
	iaddq 1, %rax
MOV2: mrmovq 8(%rdi), %r8
	rmmovq %r8, 8(%rsi)
	andq %r8, %r8
	jle MOV1
	iaddq 1, %rax
MOV1: mrmovq (%rdi), %r8
	rmmovq %r8, (%rsi)
	andq %r8, %r8
	jle MOV0
	iaddq 1, %rax
MOV0:
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
